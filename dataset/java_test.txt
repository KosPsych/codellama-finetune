    private static String getInputDataFileName(String testName) {
        return Character.toUpperCase(testName.charAt(0)) + testName.substring(1) + ".regexp";
    }
###END### 
    private static String getExpectedResultFileName(String testName) {
        return Character.toUpperCase(testName.charAt(0)) + testName.substring(1) + "Expected" + ".regexp";
    }
###END###
    public void testNamedCharacter() {
      myFixture.configureByText(RegExpFileType.INSTANCE, "\\N{SMILE<caret>}");
      final LookupElement[] elements = myFixture.completeBasic();
      final List<String> completion = ContainerUtil.map(elements, LookupElement::getLookupString);
      List<String> alwaysPresent = Arrays.asList(
        "SMILE", "SMILING FACE WITH SMILING EYES", "SMILING FACE WITH HEART-SHAPED EYES",
        "SMILING CAT FACE WITH HEART-SHAPED EYES", "SMILING FACE WITH OPEN MOUTH AND SMILING EYES",
        "SMILING FACE WITH OPEN MOUTH AND TIGHTLY-CLOSED EYES", "CAT FACE WITH WRY SMILE",
        "GRINNING CAT FACE WITH SMILING EYES", "GRINNING FACE WITH SMILING EYES",
        "KISSING FACE WITH SMILING EYES",
        // Unicode 10.0 - Java SE 11
        "SMILING FACE WITH SMILING EYES AND HAND COVERING MOUTH",
        "SIGNWRITING MOUTH SMILE", "SIGNWRITING MOUTH SMILE OPEN",
        "SIGNWRITING MOUTH SMILE WRINKLED",
        // Unicode 11.0 - Java SE 12
        "SMILING FACE WITH SMILING EYES AND THREE HEARTS",
        // Unicode 13.0 - Java SE 15
        "CHORASMIAN LETTER ALEPH", "CHORASMIAN LETTER AYIN", "CHORASMIAN LETTER BETH",
        "CHORASMIAN LETTER CURLED WAW", "CHORASMIAN LETTER DALETH", "CHORASMIAN LETTER GIMEL",
        "CHORASMIAN LETTER HE", "CHORASMIAN LETTER HETH", "CHORASMIAN LETTER KAPH",
        "CHORASMIAN LETTER LAMEDH", "CHORASMIAN LETTER MEM", "CHORASMIAN LETTER NUN",
        "CHORASMIAN LETTER PE", "CHORASMIAN LETTER RESH", "CHORASMIAN LETTER SAMEKH",
        "CHORASMIAN LETTER SHIN", "CHORASMIAN LETTER SMALL ALEPH", "CHORASMIAN LETTER TAW",
        "CHORASMIAN LETTER WAW", "CHORASMIAN LETTER YODH", "CHORASMIAN LETTER ZAYIN");
      assertTrue(completion.toString(), completion.containsAll(alwaysPresent));
      List<String> other = new ArrayList<>(completion);
      other.removeAll(alwaysPresent);
      List<String> maybePresent = Arrays.asList(
        // Unicode 15.0 - Java SE 20
        "LATIN SMALL LETTER D WITH MID-HEIGHT LEFT HOOK", "LATIN SMALL LETTER L WITH MID-HEIGHT LEFT HOOK",
        "LATIN SMALL LETTER N WITH MID-HEIGHT LEFT HOOK", "LATIN SMALL LETTER R WITH MID-HEIGHT LEFT HOOK",
        "LATIN SMALL LETTER S WITH MID-HEIGHT LEFT HOOK", "LATIN SMALL LETTER T WITH MID-HEIGHT LEFT HOOK");
      assertTrue(other.toString(), maybePresent.containsAll(other));
    }
###END###
    public void testBackSlashVariants() {
        List<String> nameList =
          new ArrayList<>(Arrays.asList("d", "D", "s", "S", "w", "W", "b", "B", "A", "G", "Z", "z", "Q", "E",
                                        "t", "n", "r", "f", "a", "e", "h", "H", "v", "V", "R", "X", "b{g}"));
        for (String[] stringArray : DefaultRegExpPropertiesProvider.getInstance().getAllKnownProperties()) {
            nameList.add("p{" + stringArray[0] + "}");
        }
      myFixture.testCompletionVariants(getInputDataFileName(getTestName(true)), ArrayUtilRt.toStringArray(nameList));
    }
###END###
    public void testPropertyVariants() {
        List<String> nameList = new ArrayList<>();
        for (String[] stringArray : DefaultRegExpPropertiesProvider.getInstance().getAllKnownProperties()) {
            nameList.add("{" + stringArray[0] + "}");
        }
      myFixture.testCompletionVariants(getInputDataFileName(getTestName(true)), ArrayUtilRt.toStringArray(nameList));
    }
###END###
    public void testPropertyAlpha() {
      myFixture.configureByText(RegExpFileType.INSTANCE, "\\P{Alp<caret>}");
      myFixture.completeBasic();
      myFixture.checkResult("\\P{Alpha<caret>}");
    }
###END###
    public void doTest() {
        String inputDataFileName = getInputDataFileName(getTestName(true));
        String expectedResultFileName = getExpectedResultFileName(getTestName(true));
        myFixture.testCompletion(inputDataFileName, expectedResultFileName);
    }
###END###
    protected String getBasePath() {
      String homePath = PathManager.getHomePath();
      File candidate = new File(homePath, "community/RegExpSupport/testData/completion");
      if (candidate.isDirectory()) {
        return "/community/RegExpSupport/testData/completion";
      }
      return "/RegExpSupport/testData/completion";
    }
###END###
  public void testSimple() {
    quickfixTest("<warning descr=\"Octal escape '\\011' in RegExp\">\\011</warning>", "\\x09", "Replace with '\\x09'");
  }
###END###
  protected LocalInspectionTool getInspection() {
    return new OctalEscapeInspection();
  }
###END###
  public void testSimple() {
    quickfixTest("abc <warning descr=\"Unnecessary non-capturing group '(?:def)'\"><caret>(?:</warning>def) ghi",
                 "abc def ghi",
                 RegExpBundle.message("inspection.quick.fix.remove.unnecessary.non.capturing.group"));
  }
###END###
  public void testNoWarnOnRegularGroup() {
    highlightTest("abc (def) ghi");
  }
###END###
  public void testNoWarnOnAlternation() {
    highlightTest("aa(?:bb|bbb)cccc");
  }
###END###
  public void testNoNonCapturingGroupWarnOnEmptyGroup() {
    highlightTest("<warning descr=\"Empty group\">(?:)</warning>");
  }
###END###
  public void testNoWarnOnNestedClosure() {
    highlightTest("\\d{2}(?:\\d{3})?");
    highlightTest("\\d{2}(?:\\d{3}){2}");
    highlightTest("\\d{2}(?:\\d{3})+");
    highlightTest("\\d{2}(?:\\d{3})*");
  }
###END###
  public void testTopLevelAlternation() {
    quickfixTest("<warning descr=\"Unnecessary non-capturing group '(?:xx|xy)'\">(?:</warning>xx|xy)", "xx|xy",
                 RegExpBundle.message("inspection.quick.fix.remove.unnecessary.non.capturing.group"));
  }
###END###
  public void testSingleAtom() {
    quickfixTest("aaa<warning descr=\"Unnecessary non-capturing group '(?:b)'\">(?:<caret></warning>b)+aaa",
                 "aaab+aaa",
                 RegExpBundle.message("inspection.quick.fix.remove.unnecessary.non.capturing.group"));
  }
###END###
  public void testCorrectEscaping() {
    quickfixTest("<warning descr=\"Unnecessary non-capturing group '(?:[\\w-]+:)'\"><caret>(?:</warning>[\\w-]+:)[\\w-]+",
                 "[\\w-]+:[\\w-]+",
                 RegExpBundle.message("inspection.quick.fix.remove.unnecessary.non.capturing.group"));
  }
###END###
  protected @NotNull LocalInspectionTool getInspection() {
    return new UnnecessaryNonCapturingGroupInspection();
  }
###END###
  public void testConjunction() {
    quickfixTest("[a<warning descr=\"Redundant nested character class\"><caret>[</warning>b]]", "[ab]",
                 RegExpBundle.message("inspection.quick.fix.replace.redundant.character.class.with.contents"));
  }
###END###
  public void testIntersection() {
    quickfixTest("[a-z&&<warning descr=\"Redundant nested character class\"><caret>[</warning>aeoiuy]]", "[a-z&&aeoiuy]",
                 RegExpBundle.message("inspection.quick.fix.replace.redundant.character.class.with.contents"));
  }
###END###
  public void testNegation() {
    highlightTest("[^abc[^cde]]");
    // JDK 8: conjunction of inverted [abc] and inverted [cde], which equals inverted [c]
    // JDK 9: the inverse of the conjunction of [abc] and inverted [cde], which equals the inverse of inverted [de], which is [de]
  }
###END###
  public void testNoWarn() {
    highlightTest("[a-z&&[^aeouiy]]" ); // intersection of [a-z] with [aeouiy] inverted, which equals the  alphabet except vowels
  }
###END###
  public void testNoWarn2() {
    highlightTest("[^a[abc]]");
    // JDK 8: conjunction of inverted [a] and [abc], which equals [bc]
    // JDK 9: inverted conjunction of [a] and [abc], which equals inverted [abc]
  }
###END###
  public void testNegatedIntersection() {
    highlightTest("[^a&&[^abc]]");
    // JDK 8: intersection of inverted [a] and inverted [abc], which equals inverted [abc]
    // JDK 9: inverted intersection of [a] and inverted [abc], which equals inverted empty class, which matches everything
  }
###END###
  protected @NotNull LocalInspectionTool getInspection() {
    return new RedundantNestedCharacterClassInspection();
  }
###END###
  public boolean value(@NotNull PsiElement element) {
    final ASTNode node = element.getNode();
    if ((node != null && node.getElementType() == RegExpTT.CHARACTER) ||
        (element instanceof RegExpChar && ((RegExpChar)element).getType() == RegExpChar.Type.CHAR)) {
      return false;
    }
    return true;
  }
###END###
    public void visitRegExpElement(RegExpElement element) {
        visitElement(element);
    }
###END###
    public void visitRegExpChar(RegExpChar ch) {
        visitRegExpElement(ch);
    }
###END###
    public void visitRegExpCharRange(RegExpCharRange range) {
        visitRegExpElement(range);
    }
###END###
    public void visitSimpleClass(RegExpSimpleClass simpleClass) {
        visitRegExpElement(simpleClass);
    }
###END###
    public void visitRegExpClass(RegExpClass regExpClass) {
        visitRegExpElement(regExpClass);
    }
###END###
    public void visitRegExpGroup(RegExpGroup group) {
        visitRegExpElement(group);
    }
###END###
    public void visitRegExpOptions(RegExpOptions options) {
        visitRegExpElement(options);
    }
###END###
    public void visitRegExpProperty(RegExpProperty property) {
        visitRegExpElement(property);
    }
###END###
    public void visitRegExpNamedCharacter(RegExpNamedCharacter namedCharacter) {
        visitRegExpChar(namedCharacter);
    }
###END###
    public void visitRegExpBranch(RegExpBranch branch) {
        visitRegExpElement(branch);
    }
###END###
    public void visitRegExpPattern(RegExpPattern pattern) {
        visitRegExpElement(pattern);
    }
###END###
    public void visitRegExpBackref(RegExpBackref backref) {
        visitRegExpElement(backref);
    }
###END###
    public void visitRegExpClosure(RegExpClosure closure) {
        visitRegExpElement(closure);
    }
###END###
    public void visitRegExpQuantifier(RegExpQuantifier quantifier) {
        visitRegExpElement(quantifier);
    }
###END###
    public void visitRegExpBoundary(RegExpBoundary boundary) {
        visitRegExpElement(boundary);
    }
###END###
    public void visitRegExpSetOptions(RegExpSetOptions options) {
        visitRegExpElement(options);
    }
###END###
    public void visitRegExpIntersection(RegExpIntersection intersection) {
        visitRegExpElement(intersection);
    }
###END###
    public void visitRegExpNamedGroupRef(RegExpNamedGroupRef groupRef) {
        visitRegExpElement(groupRef);
    }
###END###
    public void visitRegExpConditional(RegExpConditional conditional) {
        visitRegExpElement(conditional);
    }
###END###
    public void visitPosixBracketExpression(RegExpPosixBracketExpression posixBracketExpression) {
        visitRegExpElement(posixBracketExpression);
    }
###END###
    public void visitRegExpNumber(RegExpNumber number) {
        visitRegExpElement(number);
    }
###END###
  public void accept(RegExpElementVisitor visitor) {
    visitor.visitRegExpConditional(this);
  }
###END###
  public RegExpAtom getCondition() {
    final PsiElement sibling = getFirstChild().getNextSibling();
    if (!(sibling instanceof RegExpBackref) && !(sibling instanceof RegExpNamedGroupRef) && !(sibling instanceof RegExpGroup)) {
      return null;
    }
    return (RegExpAtom)sibling;
  }
###END###
    public void accept(RegExpElementVisitor visitor) {
        visitor.visitRegExpClosure(this);
    }
###END###
    public RegExpQuantifier getQuantifier() {
        final ASTNode node = getNode().findChildByType(RegExpElementTypes.QUANTIFIER);
        assert node != null;
        return (RegExpQuantifier)node.getPsi();
    }
###END###
    public RegExpAtom getAtom() {
        final RegExpAtom atom = PsiTreeUtil.getChildOfType(this, RegExpAtom.class);
        assert atom != null;
        return atom;
    }
###END###
    public void accept(RegExpElementVisitor visitor) {
        visitor.visitRegExpOptions(this);
    }
###END###
    public boolean isSet(char option) {
        return getUnescapedText().indexOf(option) >= 0;
    }
###END###
  public void accept(RegExpElementVisitor visitor) {
    visitor.visitRegExpGroup(this);
  }
###END###
  public @NotNull RegExpPattern getPattern() {
    final ASTNode node = getNode().findChildByType(RegExpElementTypes.PATTERN);
    assert node != null;
    return (RegExpPattern)node.getPsi();
  }
###END###
  public boolean isCapturing() {
    final Type type = getType();
    return type == Type.CAPTURING_GROUP || type == Type.NAMED_GROUP || type == Type.QUOTED_NAMED_GROUP || type == Type.PYTHON_NAMED_GROUP;
  }
###END###
  public boolean isAnyNamedGroup() {
    final Type type = getType();
    return type == Type.NAMED_GROUP || type == Type.QUOTED_NAMED_GROUP || type == Type.PYTHON_NAMED_GROUP;
  }
###END###
  public Type getType() {
    final IElementType elementType = getNode().getFirstChildNode().getElementType();
    if (elementType == RegExpTT.GROUP_BEGIN) {
      return Type.CAPTURING_GROUP;
    }
    else if (elementType == RegExpTT.RUBY_NAMED_GROUP) {
      return Type.NAMED_GROUP;
    }
    else if (elementType == RegExpTT.PYTHON_NAMED_GROUP) {
      return Type.PYTHON_NAMED_GROUP;
    }
    else if (elementType == RegExpTT.RUBY_QUOTED_NAMED_GROUP) {
      return Type.QUOTED_NAMED_GROUP;
    }
    else if (elementType == RegExpTT.ATOMIC_GROUP) {
      return Type.ATOMIC;
    }
    else if (elementType == RegExpTT.NON_CAPT_GROUP) {
      return Type.NON_CAPTURING;
    }
    else if (elementType == RegExpTT.SET_OPTIONS) {
      return Type.OPTIONS;
    }
    else if (elementType == RegExpTT.POS_LOOKAHEAD) {
      return Type.POSITIVE_LOOKAHEAD;
    }
    else if (elementType == RegExpTT.NEG_LOOKAHEAD) {
      return Type.NEGATIVE_LOOKAHEAD;
    }
    else if (elementType == RegExpTT.POS_LOOKBEHIND) {
      return Type.POSITIVE_LOOKBEHIND;
    }
    else if (elementType == RegExpTT.NEG_LOOKBEHIND) {
      return Type.NEGATIVE_LOOKBEHIND;
    }
    else if (elementType == RegExpTT.PCRE_BRANCH_RESET) {
      return Type.PCRE_BRANCH_RESET;
    }
    throw new AssertionError();
  }
###END###
  public static boolean isPcreConditionalGroup(ASTNode node) {
    return node != null && node.findChildByType(RegExpTT.PCRE_CONDITIONS) != null;
  }
###END###
  public static boolean isPcreDefine(ASTNode node) {
    return node != null && node.findChildByType(RegExpTT.PCRE_DEFINE) != null;
  }
###END###
  public String getGroupName() {
    final ASTNode nameNode = getNode().findChildByType(RegExpTT.NAME);
    return nameNode != null ? nameNode.getText() : null;
  }
###END###
  public String getName() {
    return getGroupName();
  }
###END###
  public PsiElement setName(@NonNls @NotNull String name) throws IncorrectOperationException {
    throw new IncorrectOperationException();
  }
###END###
  public int getTextOffset() {
    return getFirstChild().getNextSibling().getTextOffset();
  }
###END###
